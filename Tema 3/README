Frunza Roxana 321CB

Pentru rezolvarea temei, am implementat multiplexarea folosind select. Deschidem un socket TCP pe care se primesc cereri de conectare si avem doua multimii de descriptori in care salvam clientii conectati la un moment dat. Daca am primit un mesaj pe socketul deschis de noi, inseamna ca un nou client s-a conectat. Daca primim un mesaj pe un alt socket, inseamna ca am primit un request de la unul din clientii deja conectati.

Daca primim un mesaj de la client inseamna ca primim un request. Deoarece lungimea requestului poate fi lunga, am ales sa salvez informatiile venite de la client intr-un fisier temporar. Citim prin socket pana primim \r\n\r\n care marcheaza sfarsitului cererii HTTP. Citim prima linii din fisierul in care am salvat requestul si verificam daca URL-ul primit este dat cu calea absoluta (contine http://), salvam link-ul complet. Daca URL-ul primit este dat folosind calea relativa, citim din fisier si uurmatoarea linie (cea cu Host:) pentru a afla host-ul. Pentru a obtine link-ul concatenam la host calea catre resursa (pentru a obtine URL-ul complet). Odata ce avem link-ul, cautam in lista de cache pentru a vedea daca avem salvata resursa cerura. Daca este salvata, deschidem fisierul corespunzator si trimitem informatia catre client.
Lista de cache este salvata ca un vector de structuri pe care le-am declarat in fisierul utils.h. Structura Cache salveaza comanda realizata de client (comenzi valide: GET, HEAD, POST), link-ul complet (atat host-ul cat si calea catre resursa) si numele fisierului in care se salveaza informatia. 
Daca nu avem informatia necesara salvam in cache, deschidem un socket TCP prin care vom trimite cererea HTTP. Inainte de a trimite cererea catre server, vedem daca aceasta este valida. Initial verific daca avem una din comezile: HEAD, POST, GET. Proxy-ul nu verifica si alte comenzi, deci daca clientul trimite altceva, trimitem eroarea 501 Not Implemented (conform RFC 1945). De asemenea, verificam daca folosim cale relativa sau cale absoluta. In cazul in care s-a folosit calea absoluta, urmatoarea linie din request trebuie sa fie cea care specifica host-ul. In caz contrar, trimitem eroarea 400 Bad Request. 
Odata ce am validat comanda, cream un sockaddr_in pentru a ne conecta la server. Folosim port-ul din link (daca existam 80 altfel) iar pentru a aflat ip-ul gazdei folosim functia gethostbyname. Odata stabilita legatura, citim fiecare linie din fisierul in care am salvat requestul si le trimitem catre server. Cand primim raspunsul de la server, il trimitem catre client si il salvam in cache. Nu salvam informatia in cache daca intalnim campul Pragma: no-cache, Cache-Control: private sau Cache-Control: no-cache. De asemenea, raspunsul la comenzile de tip POST nu este salvat. 
La final inchidem conexiunea catre serverul http si catre clientul care a realizat cererea. 